// Code generated by goctl. DO NOT EDIT!
// Source: im-user.proto

package server

import (
	"context"

	"github.com/showurl/Path-IM-Server-OICQ/app/imuser/rpc/internal/logic"
	"github.com/showurl/Path-IM-Server-OICQ/app/imuser/rpc/internal/svc"
	"github.com/showurl/Path-IM-Server-OICQ/app/imuser/rpc/pb"
)

type ImUserServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedImUserServiceServer
}

func NewImUserServiceServer(svcCtx *svc.ServiceContext) *ImUserServiceServer {
	return &ImUserServiceServer{
		svcCtx: svcCtx,
	}
}

//  判断用户A是否在B黑名单中
func (s *ImUserServiceServer) IfAInBBlacklist(ctx context.Context, in *pb.IfAInBBlacklistReq) (*pb.IfAInBBlacklistResp, error) {
	l := logic.NewIfAInBBlacklistLogic(ctx, s.svcCtx)
	return l.IfAInBBlacklist(in)
}

//  判断用户A是否在B好友列表中
func (s *ImUserServiceServer) IfAInBFriendList(ctx context.Context, in *pb.IfAInBFriendListReq) (*pb.IfAInBFriendListResp, error) {
	l := logic.NewIfAInBFriendListLogic(ctx, s.svcCtx)
	return l.IfAInBFriendList(in)
}

//  获取单聊会话的消息接收选项
func (s *ImUserServiceServer) GetSingleConversationRecvMsgOpts(ctx context.Context, in *pb.GetSingleConversationRecvMsgOptsReq) (*pb.GetSingleConversationRecvMsgOptsResp, error) {
	l := logic.NewGetSingleConversationRecvMsgOptsLogic(ctx, s.svcCtx)
	return l.GetSingleConversationRecvMsgOpts(in)
}

//  获取群成员列表 通过消息接收选项
func (s *ImUserServiceServer) GetUserListFromGroupWithOpt(ctx context.Context, in *pb.GetUserListFromGroupWithOptReq) (*pb.GetUserListFromGroupWithOptResp, error) {
	l := logic.NewGetUserListFromGroupWithOptLogic(ctx, s.svcCtx)
	return l.GetUserListFromGroupWithOpt(in)
}

//  检查token
func (s *ImUserServiceServer) VerifyToken(ctx context.Context, in *pb.VerifyTokenReq) (*pb.VerifyTokenResp, error) {
	l := logic.NewVerifyTokenLogic(ctx, s.svcCtx)
	return l.VerifyToken(in)
}

//  是否预览消息
func (s *ImUserServiceServer) IfPreviewMessage(ctx context.Context, in *pb.IfPreviewMessageReq) (*pb.IfPreviewMessageResp, error) {
	l := logic.NewIfPreviewMessageLogic(ctx, s.svcCtx)
	return l.IfPreviewMessage(in)
}
