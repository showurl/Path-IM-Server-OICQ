// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	GetMaxAndMinSeq(ctx context.Context, in *GetMinAndMaxSeqReq, opts ...grpc.CallOption) (*GetMinAndMaxSeqResp, error)
	GetMinAndMaxGroupSeq(ctx context.Context, in *GetMinAndMaxGroupSeqReq, opts ...grpc.CallOption) (*GetMinAndMaxGroupSeqResp, error)
	PullMessageBySeqList(ctx context.Context, in *PullMsgBySeqListReq, opts ...grpc.CallOption) (*PullMsgListResp, error)
	PullMessageByGroupSeqList(ctx context.Context, in *PullMsgByGroupSeqListReq, opts ...grpc.CallOption) (*PullMsgListResp, error)
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) GetMaxAndMinSeq(ctx context.Context, in *GetMinAndMaxSeqReq, opts ...grpc.CallOption) (*GetMinAndMaxSeqResp, error) {
	out := new(GetMinAndMaxSeqResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/GetMaxAndMinSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetMinAndMaxGroupSeq(ctx context.Context, in *GetMinAndMaxGroupSeqReq, opts ...grpc.CallOption) (*GetMinAndMaxGroupSeqResp, error) {
	out := new(GetMinAndMaxGroupSeqResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/GetMinAndMaxGroupSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) PullMessageBySeqList(ctx context.Context, in *PullMsgBySeqListReq, opts ...grpc.CallOption) (*PullMsgListResp, error) {
	out := new(PullMsgListResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/PullMessageBySeqList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) PullMessageByGroupSeqList(ctx context.Context, in *PullMsgByGroupSeqListReq, opts ...grpc.CallOption) (*PullMsgListResp, error) {
	out := new(PullMsgListResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/PullMessageByGroupSeqList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, "/pbChat.Chat/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	GetMaxAndMinSeq(context.Context, *GetMinAndMaxSeqReq) (*GetMinAndMaxSeqResp, error)
	GetMinAndMaxGroupSeq(context.Context, *GetMinAndMaxGroupSeqReq) (*GetMinAndMaxGroupSeqResp, error)
	PullMessageBySeqList(context.Context, *PullMsgBySeqListReq) (*PullMsgListResp, error)
	PullMessageByGroupSeqList(context.Context, *PullMsgByGroupSeqListReq) (*PullMsgListResp, error)
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) GetMaxAndMinSeq(context.Context, *GetMinAndMaxSeqReq) (*GetMinAndMaxSeqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxAndMinSeq not implemented")
}
func (UnimplementedChatServer) GetMinAndMaxGroupSeq(context.Context, *GetMinAndMaxGroupSeqReq) (*GetMinAndMaxGroupSeqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinAndMaxGroupSeq not implemented")
}
func (UnimplementedChatServer) PullMessageBySeqList(context.Context, *PullMsgBySeqListReq) (*PullMsgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMessageBySeqList not implemented")
}
func (UnimplementedChatServer) PullMessageByGroupSeqList(context.Context, *PullMsgByGroupSeqListReq) (*PullMsgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullMessageByGroupSeqList not implemented")
}
func (UnimplementedChatServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_GetMaxAndMinSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinAndMaxSeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetMaxAndMinSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/GetMaxAndMinSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetMaxAndMinSeq(ctx, req.(*GetMinAndMaxSeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetMinAndMaxGroupSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinAndMaxGroupSeqReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetMinAndMaxGroupSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/GetMinAndMaxGroupSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetMinAndMaxGroupSeq(ctx, req.(*GetMinAndMaxGroupSeqReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_PullMessageBySeqList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMsgBySeqListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).PullMessageBySeqList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/PullMessageBySeqList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).PullMessageBySeqList(ctx, req.(*PullMsgBySeqListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_PullMessageByGroupSeqList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullMsgByGroupSeqListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).PullMessageByGroupSeqList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/PullMessageByGroupSeqList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).PullMessageByGroupSeqList(ctx, req.(*PullMsgByGroupSeqListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbChat.Chat/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbChat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaxAndMinSeq",
			Handler:    _Chat_GetMaxAndMinSeq_Handler,
		},
		{
			MethodName: "GetMinAndMaxGroupSeq",
			Handler:    _Chat_GetMinAndMaxGroupSeq_Handler,
		},
		{
			MethodName: "PullMessageBySeqList",
			Handler:    _Chat_PullMessageBySeqList_Handler,
		},
		{
			MethodName: "PullMessageByGroupSeqList",
			Handler:    _Chat_PullMessageByGroupSeqList_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Chat_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
