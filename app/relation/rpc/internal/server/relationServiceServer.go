// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package server

import (
	"context"

	"github.com/showurl/Path-IM-Server-OICQ/app/relation/rpc/internal/logic"
	"github.com/showurl/Path-IM-Server-OICQ/app/relation/rpc/internal/svc"
	"github.com/showurl/Path-IM-Server-OICQ/app/relation/rpc/pb"
)

type RelationServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedRelationServiceServer
}

func NewRelationServiceServer(svcCtx *svc.ServiceContext) *RelationServiceServer {
	return &RelationServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *RelationServiceServer) AddFriend(ctx context.Context, in *pb.AddFriendReq) (*pb.AddFriendResp, error) {
	l := logic.NewAddFriendLogic(ctx, s.svcCtx)
	return l.AddFriend(in)
}

func (s *RelationServiceServer) DelFriend(ctx context.Context, in *pb.DelFriendReq) (*pb.DelFriendResp, error) {
	l := logic.NewDelFriendLogic(ctx, s.svcCtx)
	return l.DelFriend(in)
}

func (s *RelationServiceServer) IsFriend(ctx context.Context, in *pb.IsFriendReq) (*pb.IsFriendResp, error) {
	l := logic.NewIsFriendLogic(ctx, s.svcCtx)
	return l.IsFriend(in)
}

func (s *RelationServiceServer) GetFriendModel(ctx context.Context, in *pb.GetFriendModelReq) (*pb.GetFriendModelResp, error) {
	l := logic.NewGetFriendModelLogic(ctx, s.svcCtx)
	return l.GetFriendModel(in)
}

func (s *RelationServiceServer) UpdateFriendModel(ctx context.Context, in *pb.UpdateFriendModelReq) (*pb.UpdateFriendModelResp, error) {
	l := logic.NewUpdateFriendModelLogic(ctx, s.svcCtx)
	return l.UpdateFriendModel(in)
}

func (s *RelationServiceServer) GetFriendIds(ctx context.Context, in *pb.GetFriendIdsReq) (*pb.GetFriendIdsResp, error) {
	l := logic.NewGetFriendIdsLogic(ctx, s.svcCtx)
	return l.GetFriendIds(in)
}

func (s *RelationServiceServer) AddBlacklist(ctx context.Context, in *pb.AddBlacklistReq) (*pb.AddBlacklistResp, error) {
	l := logic.NewAddBlacklistLogic(ctx, s.svcCtx)
	return l.AddBlacklist(in)
}

func (s *RelationServiceServer) DelBlacklist(ctx context.Context, in *pb.DelBlacklistReq) (*pb.DelBlacklistResp, error) {
	l := logic.NewDelBlacklistLogic(ctx, s.svcCtx)
	return l.DelBlacklist(in)
}

func (s *RelationServiceServer) IsBlacklist(ctx context.Context, in *pb.IsBlacklistReq) (*pb.IsBlacklistResp, error) {
	l := logic.NewIsBlacklistLogic(ctx, s.svcCtx)
	return l.IsBlacklist(in)
}

func (s *RelationServiceServer) GetBlacklist(ctx context.Context, in *pb.GetBlacklistReq) (*pb.GetBlacklistResp, error) {
	l := logic.NewGetBlacklistLogic(ctx, s.svcCtx)
	return l.GetBlacklist(in)
}

func (s *RelationServiceServer) GetBlacklistModel(ctx context.Context, in *pb.GetBlacklistModelReq) (*pb.GetBlacklistModelResp, error) {
	l := logic.NewGetBlacklistModelLogic(ctx, s.svcCtx)
	return l.GetBlacklistModel(in)
}
