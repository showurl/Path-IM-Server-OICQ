// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package relationservice

import (
	"context"

	"github.com/showurl/Path-IM-Server-OICQ/app/relation/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddBlacklistReq       = pb.AddBlacklistReq
	AddBlacklistResp      = pb.AddBlacklistResp
	AddFriendReq          = pb.AddFriendReq
	AddFriendResp         = pb.AddFriendResp
	DelBlacklistReq       = pb.DelBlacklistReq
	DelBlacklistResp      = pb.DelBlacklistResp
	DelFriendReq          = pb.DelFriendReq
	DelFriendResp         = pb.DelFriendResp
	GetBlacklistModelReq  = pb.GetBlacklistModelReq
	GetBlacklistModelResp = pb.GetBlacklistModelResp
	GetBlacklistReq       = pb.GetBlacklistReq
	GetBlacklistResp      = pb.GetBlacklistResp
	GetFriendIdsReq       = pb.GetFriendIdsReq
	GetFriendIdsResp      = pb.GetFriendIdsResp
	GetFriendModelReq     = pb.GetFriendModelReq
	GetFriendModelResp    = pb.GetFriendModelResp
	IsBlacklistReq        = pb.IsBlacklistReq
	IsBlacklistResp       = pb.IsBlacklistResp
	IsBlacklistResp_Item  = pb.IsBlacklistResp_Item
	IsFriendReq           = pb.IsFriendReq
	IsFriendResp          = pb.IsFriendResp
	IsFriendResp_Item     = pb.IsFriendResp_Item
	UpdateFriendModelReq  = pb.UpdateFriendModelReq
	UpdateFriendModelResp = pb.UpdateFriendModelResp

	RelationService interface {
		AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error)
		DelFriend(ctx context.Context, in *DelFriendReq, opts ...grpc.CallOption) (*DelFriendResp, error)
		IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendResp, error)
		GetFriendModel(ctx context.Context, in *GetFriendModelReq, opts ...grpc.CallOption) (*GetFriendModelResp, error)
		UpdateFriendModel(ctx context.Context, in *UpdateFriendModelReq, opts ...grpc.CallOption) (*UpdateFriendModelResp, error)
		GetFriendIds(ctx context.Context, in *GetFriendIdsReq, opts ...grpc.CallOption) (*GetFriendIdsResp, error)
		AddBlacklist(ctx context.Context, in *AddBlacklistReq, opts ...grpc.CallOption) (*AddBlacklistResp, error)
		DelBlacklist(ctx context.Context, in *DelBlacklistReq, opts ...grpc.CallOption) (*DelBlacklistResp, error)
		IsBlacklist(ctx context.Context, in *IsBlacklistReq, opts ...grpc.CallOption) (*IsBlacklistResp, error)
		GetBlacklist(ctx context.Context, in *GetBlacklistReq, opts ...grpc.CallOption) (*GetBlacklistResp, error)
		GetBlacklistModel(ctx context.Context, in *GetBlacklistModelReq, opts ...grpc.CallOption) (*GetBlacklistModelResp, error)
	}

	defaultRelationService struct {
		cli zrpc.Client
	}
)

func NewRelationService(cli zrpc.Client) RelationService {
	return &defaultRelationService{
		cli: cli,
	}
}

func (m *defaultRelationService) AddFriend(ctx context.Context, in *AddFriendReq, opts ...grpc.CallOption) (*AddFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.AddFriend(ctx, in, opts...)
}

func (m *defaultRelationService) DelFriend(ctx context.Context, in *DelFriendReq, opts ...grpc.CallOption) (*DelFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.DelFriend(ctx, in, opts...)
}

func (m *defaultRelationService) IsFriend(ctx context.Context, in *IsFriendReq, opts ...grpc.CallOption) (*IsFriendResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.IsFriend(ctx, in, opts...)
}

func (m *defaultRelationService) GetFriendModel(ctx context.Context, in *GetFriendModelReq, opts ...grpc.CallOption) (*GetFriendModelResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetFriendModel(ctx, in, opts...)
}

func (m *defaultRelationService) UpdateFriendModel(ctx context.Context, in *UpdateFriendModelReq, opts ...grpc.CallOption) (*UpdateFriendModelResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.UpdateFriendModel(ctx, in, opts...)
}

func (m *defaultRelationService) GetFriendIds(ctx context.Context, in *GetFriendIdsReq, opts ...grpc.CallOption) (*GetFriendIdsResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetFriendIds(ctx, in, opts...)
}

func (m *defaultRelationService) AddBlacklist(ctx context.Context, in *AddBlacklistReq, opts ...grpc.CallOption) (*AddBlacklistResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.AddBlacklist(ctx, in, opts...)
}

func (m *defaultRelationService) DelBlacklist(ctx context.Context, in *DelBlacklistReq, opts ...grpc.CallOption) (*DelBlacklistResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.DelBlacklist(ctx, in, opts...)
}

func (m *defaultRelationService) IsBlacklist(ctx context.Context, in *IsBlacklistReq, opts ...grpc.CallOption) (*IsBlacklistResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.IsBlacklist(ctx, in, opts...)
}

func (m *defaultRelationService) GetBlacklist(ctx context.Context, in *GetBlacklistReq, opts ...grpc.CallOption) (*GetBlacklistResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetBlacklist(ctx, in, opts...)
}

func (m *defaultRelationService) GetBlacklistModel(ctx context.Context, in *GetBlacklistModelReq, opts ...grpc.CallOption) (*GetBlacklistModelResp, error) {
	client := pb.NewRelationServiceClient(m.cli.Conn())
	return client.GetBlacklistModel(ctx, in, opts...)
}
