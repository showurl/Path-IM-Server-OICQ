// Code generated by goctl. DO NOT EDIT!
// Source: group.proto

package groupservice

import (
	"context"

	"github.com/showurl/Path-IM-Server-OICQ/app/group/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddGroupMemberReq          = pb.AddGroupMemberReq
	AddGroupMemberResp         = pb.AddGroupMemberResp
	CreateGroupReq             = pb.CreateGroupReq
	CreateGroupResp            = pb.CreateGroupResp
	DeleteGroupMemberReq       = pb.DeleteGroupMemberReq
	DeleteGroupMemberResp      = pb.DeleteGroupMemberResp
	DeleteGroupReq             = pb.DeleteGroupReq
	DeleteGroupResp            = pb.DeleteGroupResp
	GetGroupIdsReq             = pb.GetGroupIdsReq
	GetGroupIdsResp            = pb.GetGroupIdsResp
	GetGroupMemberModelReq     = pb.GetGroupMemberModelReq
	GetGroupMemberModelResp    = pb.GetGroupMemberModelResp
	GetGroupMemberReq          = pb.GetGroupMemberReq
	GetGroupMemberResp         = pb.GetGroupMemberResp
	GetGroupReq                = pb.GetGroupReq
	GetGroupResp               = pb.GetGroupResp
	UpdateGroupMemberModelReq  = pb.UpdateGroupMemberModelReq
	UpdateGroupMemberModelResp = pb.UpdateGroupMemberModelResp
	UpdateGroupReq             = pb.UpdateGroupReq
	UpdateGroupResp            = pb.UpdateGroupResp

	GroupService interface {
		CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
		GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error)
		UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error)
		DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error)
		GetGroupMember(ctx context.Context, in *GetGroupMemberReq, opts ...grpc.CallOption) (*GetGroupMemberResp, error)
		GetGroupIds(ctx context.Context, in *GetGroupIdsReq, opts ...grpc.CallOption) (*GetGroupIdsResp, error)
		AddGroupMember(ctx context.Context, in *AddGroupMemberReq, opts ...grpc.CallOption) (*AddGroupMemberResp, error)
		DeleteGroupMember(ctx context.Context, in *DeleteGroupMemberReq, opts ...grpc.CallOption) (*DeleteGroupMemberResp, error)
		GetGroupMemberModel(ctx context.Context, in *GetGroupMemberModelReq, opts ...grpc.CallOption) (*GetGroupMemberModelResp, error)
		UpdateGroupMemberModel(ctx context.Context, in *UpdateGroupMemberModelReq, opts ...grpc.CallOption) (*UpdateGroupMemberModelResp, error)
	}

	defaultGroupService struct {
		cli zrpc.Client
	}
)

func NewGroupService(cli zrpc.Client) GroupService {
	return &defaultGroupService{
		cli: cli,
	}
}

func (m *defaultGroupService) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.CreateGroup(ctx, in, opts...)
}

func (m *defaultGroupService) GetGroup(ctx context.Context, in *GetGroupReq, opts ...grpc.CallOption) (*GetGroupResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.GetGroup(ctx, in, opts...)
}

func (m *defaultGroupService) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*UpdateGroupResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.UpdateGroup(ctx, in, opts...)
}

func (m *defaultGroupService) DeleteGroup(ctx context.Context, in *DeleteGroupReq, opts ...grpc.CallOption) (*DeleteGroupResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.DeleteGroup(ctx, in, opts...)
}

func (m *defaultGroupService) GetGroupMember(ctx context.Context, in *GetGroupMemberReq, opts ...grpc.CallOption) (*GetGroupMemberResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.GetGroupMember(ctx, in, opts...)
}

func (m *defaultGroupService) GetGroupIds(ctx context.Context, in *GetGroupIdsReq, opts ...grpc.CallOption) (*GetGroupIdsResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.GetGroupIds(ctx, in, opts...)
}

func (m *defaultGroupService) AddGroupMember(ctx context.Context, in *AddGroupMemberReq, opts ...grpc.CallOption) (*AddGroupMemberResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.AddGroupMember(ctx, in, opts...)
}

func (m *defaultGroupService) DeleteGroupMember(ctx context.Context, in *DeleteGroupMemberReq, opts ...grpc.CallOption) (*DeleteGroupMemberResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.DeleteGroupMember(ctx, in, opts...)
}

func (m *defaultGroupService) GetGroupMemberModel(ctx context.Context, in *GetGroupMemberModelReq, opts ...grpc.CallOption) (*GetGroupMemberModelResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.GetGroupMemberModel(ctx, in, opts...)
}

func (m *defaultGroupService) UpdateGroupMemberModel(ctx context.Context, in *UpdateGroupMemberModelReq, opts ...grpc.CallOption) (*UpdateGroupMemberModelResp, error) {
	client := pb.NewGroupServiceClient(m.cli.Conn())
	return client.UpdateGroupMemberModel(ctx, in, opts...)
}
